df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("marginal log-likelihood") +
xlab("iteration") +
theme_bw()
png(filename = paste0("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Plot paper\\Plot\\likelihood_plot_EU_19032024_3",".png"), width = 6, height = 3, units = 'in', res = 300)
lkl_plot
dev.off()
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\cluster_marginal_CP_EU_06062024_13.RData")
marginalCP_run <- save_finalpartitions
dates_run1 <- EU_dates[which(EU_dates == "2021-06-01"):which(EU_dates == "2022-09-30")]
cp1 <- cumsum(table(marginalCP_run[[1]]))
cp2 <- cumsum(table(marginalCP_run[[2]]))
cp3 <- cumsum(table(marginalCP_run[[3]]))
cp1 <- cp1[-length(cp1)]
cp2 <- cp2[-length(cp2)]
cp3 <- cp3[-length(cp3)]
dates_run1[cp1]
dates_run1[cp2]
dates_run1[cp3]
infection_times_COVID_EU <- lapply(infection_times_COVID_EU,
function(x)
x[which(EU_dates == "2021-06-01"):which(EU_dates == "2022-09-30")])
infection_times_COVID_EU <- infection_times_COVID_EU[-states_to_remove_EU]
dataEU <- matrix(0, nrow = length(infection_times_COVID_EU), ncol = length(infection_times_COVID_EU[[1]]))
for(i in 1:length(infection_times_COVID_EU)){
dataEU[i,] <- infection_times_COVID_EU[[i]]
}
dataEU_rolling <- matrix(0, nrow = length(infection_times_COVID_EU), ncol = length(infection_times_COVID_EU[[1]]))
for(i in 1:nrow(dataEU_rolling)){
dataEU[i, which(is.na(dataEU[i,]))] = 0
pool <- rep(1:length(dataEU_rolling[i,]), dataEU[i,])
pool_sampled <- sample(pool, 50000, replace = FALSE)
dataEU_rolling[i,as.numeric(names(table(pool_sampled)))] = table(pool_sampled)
dataEU_rolling[i,] <- round(zoo::rollmean(dataEU_rolling[i,], 7, fill = TRUE))
}
df_sf_plot <- data.frame(y = as.vector(sapply(1:27, function(x) 1 - cumsum(dataEU_rolling[x,]) / sum(dataEU_rolling[x,]))),
x = rep(1:487, 27),
obs = as.factor(rep(1:27, each = 487)),
Cluster = as.factor(rep(est_part, each = 487)))
out_er$clust
lkl <- as.numeric()
for(i in 1:20000){
lkl_temp <- as.numeric()
for(j in 1:nrow(data_er_mat)){
lkl_temp[j] <- LogLikelihood_TS(data = t(as.matrix(data_er_mat[j,])), order = t(as.matrix(out_er$orders[(out_er$clust[i,j]+1),,i])), gamma_par = 0.1, a = 1, b = 1, c = 0.1)
}
lkl[i] <- sum(lkl_temp)
}
plot(lkl, type = "l")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("log-likelihood") +
xlab("iteration") +
theme_bw()
path = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\exchange_rata_data\\plot"
png(filename = paste0(path,"\\lkl_er.png"), width = 6, height = 3, units = 'in', res = 300)
lkl_plot
dev.off()
lkl_plot
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("log-likelihood") +
xlab("iteration") +
theme_bw()
lkl_plot
plot(lkl, type = "l")
df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("log-likelihood") +
xlab("iteration") +
theme_bw()
lkl_plot
path = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\exchange_rata_data\\plot"
png(filename = paste0(path,"\\lkl_er.png"), width = 6, height = 3, units = 'in', res = 300)
lkl_plot
dev.off()
2+3 # somma
5^2 # potenze
exp(4) # esponenziale
risultato <- 2 + 3
risultato
risultato
Risultato
string <- "Hello World!"
string
?read.csv
temperature_data <- data.frame(read.csv("data_tmp_monthly.csv",header=TRUE))
# ESERCIZIO: impostare la working directory nel caso in cui non sia gia' la cartella
#            che contiene i file PLS
setwd("C:\\Users\\LUCA\\Downloads")
temperature_data <- data.frame(read.csv("data_tmp_monthly.csv",header=TRUE))
temperature_data
italy_data <- temperature_data[, c(1, 7)] # selezioniamo solo le variabili di nostro interesse
italy_data
usa_data_ts <- temperature_data[,c(1,12)]
usa_data_ts <- temperature_data[,c(1,10)]
str(italy_data) # codifica variabili
head(italy_data) # visualizzare le prime 6 osservazioni
italy_data[,1] <- seq(as.POSIXct("1970-01-01"), by = "month", length.out = nrow(italy_data))
italy_data_ts <- ts(italy_data$ITA, frequency = 12, start = c(1970, 1))
italy_data_ts
plot(italy_data_ts, type="l", pch=19,
main="Temperatura media dal 1970 al 2023 in Italia", ylab="temperatura media")
plot(italy_data_ts, type="l", pch=19,
main="Temperatura media dal 1970 al 2023 in Italia", ylab="temperatura media")
plot(italy_data_ts, type="l", pch=19,
main="Temperatura media dal 1970 al 2023 in Italia", ylab="temperatura media")
plot(italy_data_ts, type="l", pch=19,
main="Temperatura media dal 1970 al 2023 in Italia", ylab="temperatura media")
library(ISLR2)
library(survival)
?veteran
data <- veteran
fit.posres <- survfit(Surv(time, status) ~ 1, data = veteran)
survdiff(Surv(time,status) ~ celltype, data = veteran)
prova_1 <- survdiff(Surv(time,status) ~ celltype, data = veteran)
prova_2 <- survfit(Surv(time,status) ~ celltype, data = veteran)
prova_1
prova_2
autoplot(prova_2)
mcmc_chain <- BNPmix::clean_partition(out_er$clust[5000:15000,])
est_clust
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\exchange_rata_data\\results_er_24012025.Rdata")
exc_rates <- c("EUR_AUD","EUR_BRL","EUR_CAD","EUR_CHF",
"EUR_CNY","EUR_CZK", "EUR_DKK", "EUR_GBP", "EUR_HKD", "EUR_HUF",
"EUR_IDR", "EUR_ILS", "EUR_INR", "EUR_ISK", "EUR_JPY", "EUR_KRW",
"EUR_MXN","EUR_MYR","EUR_NOK","EUR_NZD","EUR_PHP","EUR_PLN",
"EUR_RON", "EUR_SEK","EUR_SGD","EUR_THB","EUR_TRY","EUR_USD","EUR_ZAR")
mcmc_chain <- BNPmix::clean_partition(out_er$clust[5000:15000,])
est_clust <- mcclust.ext::minbinder.ext(psm = salso::psm(mcmc_chain),
cls.draw = mcmc_chain, method = "draws")$cl + 1
est_clust
prova_salso <- salso::salso(x = mcmc_chain, loss = "binder", maxNClusters = 7);prova_salso;table(prova_salso)
prova_salso <- salso::salso(x = mcmc_chain, loss = "binder", maxNClusters = 8);prova_salso;table(prova_salso)
exc_rates[which(est_clust == 1)]
obs_7 <- which(est_clust == 7)
obs_7
obs_8
obs_8 <- which(est_clust == 8)
est_clust[c(obs_7,obs_8)]
prova_salso[c(obs_7,obs_8)]
prova_salso <- salso::salso(x = mcmc_chain, loss = "binder", maxNClusters = 7);prova_salso;table(prova_salso)
prova_salso[c(obs_7,obs_8)]
ggsurvplot(prova_1,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
library(ggsurvplot)
library(survival)
library(survminer)
ggsurvplot(prova_1,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
ggsurvplot(prova_1,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
library(survival)
library(survminer)
ggsurvplot(prova_1)
ggsurvplot(prova_2)
surv(prova_2)
prova_2 <- survfit(Surv(time,status) ~ celltype, data = veteran)
prova_2
prova_1 <- survdiff(Surv(time,status) ~ celltype, data = veteran)
prova_1
veteran$age
table(veteran$age)
prova_1 <- survdiff(Surv(time,status) ~ celltype, data = veteran)
prova_1
veteran$age_binary <- ifelse(veteran$age < 60, "<60", ">=")
veteran$age_binary
veteran$age_binary <- ifelse(veteran$age < 60, "<60", ">=60")
veteran$age_binary
prova_2 <- survdiff(Surv(time,status) ~ age_binary, data = veteran)
prova_2
plot(prova_2)
prova_2_fit <- survfit(Surv(time,status) ~ age_binary, data = veteran)
plot(prova_2_fit)
veteran$age_binary <- ifelse(veteran$age < 65, "<65", ">=65")
prova_2 <- survdiff(Surv(time,status) ~ age_binary, data = veteran)
prova_2_fit <- survfit(Surv(time,status) ~ age_binary, data = veteran)
plot(prova_2_fit)
prova_2_fit
prova_2
veteran$age_binary <- ifelse(veteran$age < 70, "<70", ">=70")
prova_2 <- survdiff(Surv(time,status) ~ age_binary, data = veteran)
prova_2
veteran$age_binary <- ifelse(veteran$age < 60, "<60", ">=60")
prova_2 <- survdiff(Surv(time,status) ~ age_binary, data = veteran)
prova_2
surv_1 <- survdiff(Surv(time,status) ~ celltype, data = veteran); surv_1
veteran$age_binary <- ifelse(veteran$age <= 60, "<=60", ">60")
surv_2 <- survdiff(Surv(time,status) ~ age_binary, data = veteran); surv_2 # significant
surv_1
survdiff(Surv(time, status) ~ sex, data = lung)
surv_1
veteran
surv_2
HR <- (54/62)/(74/66)
HR
HR <- (6/2.62)/(3/6.38)
HR
survdiff(Surv(time, status) ~ agecat70, data=lung)
survdiff(Surv(time, status) ~ sex, data = lung)
# Therefore, the death hazard ratio of males vs females is:
hazard_ratio <- (112/91.6)/(53/73.4)
surv_2
(74/66)/(54/62)
(54/62)/(74/66) # "<=60" vs ">60"
(74/66)/(54/62) # ">60" vs "<=60"
veteran
?time
?veteran
devtools::load_all(".")
?detect_cp_uni
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
remove.packages("BayesCPs")
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
detect_cp_uni
out$time
?detect_cp_multi
data_mat <- matrix(NA, nrow = 3, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
out <- detect_cp_multi(data = data_mat,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
par_theta_c = 2, par_theta_d = 0.2, prior_var_gamma = 0.1)
out$time
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
out$time
?cluster_cp_epi
data_mat <- matrix(NA, nrow = 5, ncol = 50)
betas <- list(c(rep(0.45, 25),rep(0.14,25)),
c(rep(0.55, 25),rep(0.11,25)),
c(rep(0.50, 25),rep(0.12,25)),
c(rep(0.52, 10),rep(0.15,40)),
c(rep(0.53, 10),rep(0.13,40)))
inf_times <- list()
for(i in 1:5){
inf_times[[i]] <- sim_epi_data(10000, 10, 50, betas[[i]], 1/8)
vec <- rep(0,50)
names(vec) <- as.character(1:50)
for(j in 1:50){
if(as.character(j) %in% names(table(floor(inf_times[[i]])))){
vec[j] = table(floor(inf_times[[i]]))[which(names(table(floor(inf_times[[i]]))) == j)]
}
}
data_mat[i,] <- vec
}
out <- cluster_cp_epi(data = data_mat, n_iterations = 5000, M = 500, B = 1000, L = 1)
out$time
?cluster_cp_uni
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- cluster_cp_uni(data = data_mat, n_iterations = 5000, B = 1000, L = 1, gamma = 0.5)
out$time
?cluster_cp_multi
data_array <- array(data = NA, dim = c(3,100,5))
data_array[1,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[2,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[3,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[1,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[2,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[3,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[1,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[2,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[3,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[1,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[2,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[3,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[1,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
data_array[2,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
data_array[3,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- cluster_cp_multi(data = data_array, n_iterations = 5000, B = 1000, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5, phi_0 = diag(0.1,3,3), m_0 = rep(0,3))
out$time
git config --global user.email "danese.luca1@gmail.com"
?devtools::build
?devtools::check
?devtools::build
devtools::check("C:\\Users\\LUCA\\Downloads\\lucadanese.github.io-gh-pages\\lucadanese.github.io-gh-pages", cran = T)
devtools::check("C:\\Users\\LUCA\\Downloads\\lucadanese.github.io-gh-pages.zip", cran = T)
devtools::check("BayesCPs", cran = T)
devtools::check(cran = T)
devtools::check("H:\Il mio Drive\Dottorato\Progetti\BayesCPs\R\", cran = T)
devtools::check(cran = T)
pak::pkg_install("rhub")
install.packages("rhub")
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_platforms()
rhub::rhub_check()
install.packages("nimble")
library(ggpubr)
library(ggplot2)
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(urbnmapr)
library(BNPmix)
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\10_import_real_data.R")
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\3_functions_epydem.R")
states_to_remove_EU <- which(eu_states %in% c("Iceland", "Norway", "Liechtenstein"))
eu_states <- eu_states[-states_to_remove_EU]
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
path <- "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series"
load(paste0(path,"\\Real data EPI/est_model_EU_06062024_13.Rdata"))
a = 0
for(i in 2:length(en)){if(en[i] != en[i-1]){a = a + 1}}
est_model$clust <- est_model$clust
PSM <- salso::psm(clean_partition(est_model$clust))
en <- apply(est_model$clust, 1, entropy_partition)
plot(en, type = "l")
lkl <- apply(est_model$llik, 1, function(x) sum(na.omit(x)))
plot(lkl, type = "l")
lkl
library("nimble")
lkl
nimble::calculateWAIC(lkl)
install.packages("loo")
lkl
loo::waic(lkl)
?waic
est_model$llik
loo::waic(est_model$llik)
loo::waic(na.omit(est_model$llik))
prova <- loo::waic(na.omit(est_model$llik))
prova
prova <- loo::waic(na.omit(est_model$llik[1,]))
est_model$llik[1,]
prova <- loo::waic(na.omit(as.matrix(est_model$llik[1,])))
prova
apply(lkl,2,var)
lkl
apply(est_model$llik,2,var)
apply(est_model$llik,2,var(,na.rm=T))
apply(est_model$llik,2,function(x) var(x,na.rm=T))
sum(apply(est_model$llik,2,function(x) var(x,na.rm=T)))
waic <- sum(lkl[1,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T)))
waic <- sum(est_model$llik[1,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T)))
waic
waic <- as.numeric()
for(i in 1:nrow(est_model$llik)){
waic[i] <- sum(est_model$llik[i,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T)))
}
waic
plot(waic,type= "l")
plot(lkl, type = "l")
apply(est_model$llik,2,function(x) var(x,na.rm=T))
sum(apply(est_model$llik,2,function(x) var(x,na.rm=T)))
waic <- as.numeric()
for(i in 1:nrow(est_model$llik)){
waic[i] <- - 2 * (sum(est_model$llik[i,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T))))
}
plot(waic,type= "l")
prova <- loo::waic(na.omit(as.matrix(est_model$llik[1,])))
prova
prova$waic
prova
prova$waic
waic <- as.numeric()
for(i in 1:nrow(est_model$llik)){
#waic[i] <- - 2 * (sum(est_model$llik[i,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T))))
waic[i] <- loo::waic(na.omit(as.matrix(est_model$llik[i,])))$prova
}
waic <- as.numeric()
for(i in 1:nrow(est_model$llik)){
#waic[i] <- - 2 * (sum(est_model$llik[i,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T))))
waic[i] <- loo::waic(na.omit(as.matrix(est_model$llik[i,])))$waic
}
waic
plot(waic,type= "l")
est_clust
est_part
est_part <- mcclust.ext::minbinder.ext(psm = PSM, cls.draw = est_model$clust)$cl
est_part
est_model$clust
est_model$clust[1,]
est_model$clust[1,] + 1
salso::binder(est_part, )
est_part
salso::binder(truth = est_part, estimate =  est_model$clust[1,] + 1)
salso::binder(truth = est_part, estimate =  est_model$clust[2,] + 1)
salso::binder(truth = est_part, estimate =  est_model$clust[3,] + 1)
salso::binder(truth = est_part, estimate =  est_model$clust[100,] + 1)
est_model$clust[100,] + 1
est_part
prova <- BNPmix::clean_partition(est_model$clust + 1)
prova
salso::binder(truth = est_part, estimate =  prova[1,])
est_part
prova[1,]
binder <- as.numeric()
for(i in 1:nrow(est_model$llik)){
#waic[i] <- - 2 * (sum(est_model$llik[i,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T))))
waic[i] <- loo::waic(na.omit(as.matrix(est_model$llik[i,])))$waic
binder[i] <- salso::binder(truth = est_part, estimate =  prova[i,])
}
binder
table(binder)
plot(binder,type= "l")
est_model$llik
est_model$llik[,1]
summary(est_model$llik[,1])
i=1
which(is.na(est_model$llik[,i]))
median(est_model$llik[,i])
median(est_model$llik[,i], na.rm = T)
llik_nona <- est_model$llik
for(i in 1:ncol(llik_nona)){
llik_nona[which(is.na(llik_nona[,i])),i] = median(llik_nona[,i], na.rm = T)
}
llik_nona
summary(llik_nona[,1])
summary(llik_nona[,2])
waic <- as.numeric()
for(i in 1:nrow(llik_nona)){
#waic[i] <- - 2 * (sum(est_model$llik[i,], na.rm = T) - sum(apply(est_model$llik,2,function(x) var(x,na.rm=T))))
waic[i] <- loo::waic(na.omit(as.matrix(llik_nona[i,])))$waic
#binder[i] <- salso::binder(truth = est_part, estimate =  prova[i,])
}
plot(waic,type= "l")
lkl <- apply(llik_nona, 1, sum)
plot(lkl, type = "l")
plot(lkl, type = "l", ylim = c(lkl[1,] - 10000 , lkl[1,] + 10000 ))
plot(lkl, type = "l", ylim = c(lkl[1] - 10000 , lkl[1] + 10000 ))
plot(lkl, type = "l", ylim = c(lkl[1] - median(lkl) , lkl[1] + median(lkl) ))
plot(lkl, type = "l", ylim = c(lkl[1] - min(lkl) , lkl[1] + min(lkl) ))
plot(lkl, type = "l", ylim = c(lkl[1] - median(lkl)/2 , lkl[1] + median(lkl)/2 ))
plot(lkl, type = "l", ylim = c(lkl[1] - median(lkl)/3 , lkl[1] + median(lkl)/3 ))
plot(lkl, type = "l", ylim = c(lkl[1] - median(lkl)/10 , lkl[1] + median(lkl)/10 ))
plot(lkl, type = "l", ylim = c(lkl[1] - median(lkl)/20 , lkl[1] + median(lkl)/20 ))
plot(lkl, type = "l", ylim = c(lkl[1] - median(lkl)/24 , lkl[1] + median(lkl)/24 ))
est_model$llik
llik_nona <- est_model$llik
llik_nona <- est_model$llik
llik_nona <- llik_nona %>%
mutate(fill(direction = "up"))
llik_nona <- as.tibble(est_model$llik)
llik_nona <- as_tibble(est_model$llik)
llik_nona <- llik_nona %>%
mutate(fill(direction = "up"))
llik_nona
est_model$llik
load(paste0(path,"\\Real data EPI/est_model_EU_06062024_13.Rdata"))
est_model$llik
plot(lkl[1,], type = "l")
plot(est_model$llik[1,], type = "l")
plot(est_model$llik[,1], type = "l")
plot(est_model$llik[,2], type = "l")
plot(est_model$llik[,3], type = "l")
plot(est_model$llik[,4], type = "l")
plot(est_model$llik[,5], type = "l")
plot(est_model$llik[,6], type = "l")
plot(est_model$llik[,7], type = "l")
plot(est_model$llik[,8], type = "l")
plot(est_model$llik[,9], type = "l")
plot(est_model$llik[,10], type = "l")
est_model$clust
