dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- scale(t(DATA[,c(2,3,4)]))
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
out <- detect_cp_multivariate(data = data,
n_iterations = 10000,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1, print_progress = TRUE)
library(BayesCPs)
detect_cp_multivariate
out <- DetectCPsMultivariateTS(data = data,
n_iterations = 10000,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1, print_progress = TRUE)
?DetectCPsMultivariateTS
out <- DetectCPsMultivariateTS(data = data,
n_iterations = 10000,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1)
data
devtools::load_all(".")
?cluster_cp_multi
out <- cluster_cp_multi(data = data,
n_iterations = 10000, B = 10000, L = 1, gamma = 0.1, q = 0.5, alpha_SM = 0.5, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
table(get_order_VI(out$order))
table(get_order_VI(out$clust))
salso::psm(out$clust)
out$clust
salso::psm(out$clust[,5000:10000])
salso::psm(out$clust[5000:10000,])
out$clust[5000:10000,]
data
out <- cluster_cp_multi(data = data,
n_iterations = 10000, B = 10000, L = 50, gamma = 0.1, q = 0.5, alpha_SM = 0.01, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
salso::psm(out$clust[2500:10000,])
?detect_cp_multivariate
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
table(get_order_VI(out_2$clust))
out_2
table(get_order_VI(out_2$orders))
ggplot(data[,,1]) +
geom_line(aes(x = Date, y = Open)) +
geom_line(aes(x = Date, y = Mean), col = "darkblue") +
geom_line(aes(x = Date, y = Close), col = "darkred")
data[,,1]
plot(data[1,,1], type = "l")
data
plot(DATA[1,,1], type = "l")
library(dplyr)
library(ggplot2)
library(BayesCPs)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
plot(data[1,,1], type = "l")
plot(scale(data[1,,1]), type = "l")
lines(scale(data[2,,1]))
lines(scale(data[3,,1]))
scale(data[1,,1])
data[,,1]
apply(data[,,1], 1, scale)
?detect_cp_multivariate
data[,,1] <- apply(data[,,1], 1, scale)
plot(data[1,,1], type = "l")
library(BayesCPs)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
data[,,1]
apply(data[,,1], 1, scale)
data[,,1] <- t(apply(data[,,1], 1, scale))
plot(data[1,,1], type = "l")
lines(data[2,,1])
lines(data[3,,1])
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
table(get_order_VI(out_2$orders[2000:3000,]))
cumsum(cps)
cps <- table(get_order_VI(out_2$orders[2000:3000,]))
cumsum(cps)
plot(abline = cumsum(cps)[-length(cps)])
abline(x = cumsum(cps)[-length(cps)])
abline(v = cumsum(cps)[-length(cps)])
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
for(i in 1:50){
data[,,i] <- t(apply(data[,,i], 1, scale))
}
plot(data[1,,1], type = "l")
lines(data[2,,1])
lines(data[3,,1])
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
out <- cluster_cp_multi(data = data,
n_iterations = 10000, B = 10000, L = 50, gamma = 0.1, q = 0.5, alpha_SM = 0.01, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
library(dplyr)
library(ggplot2)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- list()
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
ggplot(DATA) +
geom_line(aes(x = Date, y = Open)) +
geom_line(aes(x = Date, y = Mean), col = "darkblue") +
geom_line(aes(x = Date, y = Close), col = "darkred")
data[[i]] <- DATA[,c(2,3,4)]
}
for(i in 1:n){
DATA[[i]] <- as.data.frame(DATA[[i]]) %>% fill(Open, .direction = "updown") %>%  fill(Close, .direction = "updown") %>% fill(Mean,.direction = "updown")
DATA[[i]] <- scale(as.matrix(DATA[[i]]))
}
library(dplyr)
library(ggplot2)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- list()
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
ggplot(DATA) +
geom_line(aes(x = Date, y = Open)) +
geom_line(aes(x = Date, y = Mean), col = "darkblue") +
geom_line(aes(x = Date, y = Close), col = "darkred")
data[[i]] <- DATA[,c(2,3,4)]
}
library(dplyr)
library(ggplot2)
library(BayesCPs)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
data[,,1] <- t(apply(data[,,1], 1, scale))
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
library(BayesCPs)
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
detect_cp_multivariate
devtools::load_all(".")
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
for(i in 1:50){
data[,,i] <- t(apply(data[,,i], 1, scale))
}
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
out <- cluster_cp_multi(data = data,
n_iterations = 10000, B = 10000, L = 1, gamma = 0.1, q = 0.5, alpha_SM = 0.01, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
salso::psm(out$clust[2500:10000,])
table(get_order_VI(out$clust))
table(get_order_VI(out$clust[2500:10000,]))
MCMC_chain <- out$clust[2500:10000,]
mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
library(BNPmix)
mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
marginal_cps <- list()
est_clust <- mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
est_clust
MCMC_chain <- out$clust[5000:10000,]
est_clust <- mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
est_clust
est_clust
which(est_clust == i)
i
i = 1
obs[j]
obs <- which(est_clust == j)
j = 2
obs <- which(est_clust == j)
obs
data_marginal <- for(i in 1:length(obs)){mat_data <- rbind(data[,,obs[j]])}
data_marginal
nrow(data[,,1])
mat_data <- matrix(NA, ncol = ncol(data[,,1]))
mat_data
data_marginal <- for(i in 1:length(obs)){mat_data <- rbind(data[,,obs[j]])}
data_marginal
mat_data <- matrix(NA, ncol = ncol(data[,,1]))
data_marginal <- for(i in 1:length(obs)){mat_data <- rbind(mat_data,data[,,obs[j]])}
data_marginal
mat_data <- matrix(NA, ncol = ncol(data[,,1]))
for(i in 1:length(obs)){mat_data <- rbind(mat_data,data[,,obs[j]])}
mat_data
mat_data[2,]
mat_data
obs
mat_data <- matrix(NA, nrow = 0, ncol = ncol(data[,,1]))
for(i in 1:length(obs)){mat_data <- rbind(mat_data,data[,,obs[j]])}
mat_data
nrow(mat_data)
out_2 <- detect_cp_multivariate(data = mat_data, n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = nrow(mat_data) + 2, phi_0 = diag(1,nrow(mat_data),nrow(mat_data)), m_0 = rep(0,nrow(mat_data)))
cps <- mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
cps
MCMC_chain <- out_2$clust[2000:5000,]
cps <- mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
MCMC_chain <- out_2$orders[2000:5000,]
cps <- mcclust.ext::minbinder.ext(psm = salso::psm(clean_partition(MCMC_chain)), cls.draw = clean_partition(MCMC_chain))$cl
MCMC_chain
cps
psm_matrix <- salso::psm(clean_partition(MCMC_chain))
matrix_out <- reshape2::melt(psm_matrix[1:nrow(psm_matrix), , drop = FALSE])
install.packages("reshape2")
matrix_out <- reshape2::melt(psm_matrix[1:nrow(psm_matrix), , drop = FALSE])
matrix_out
plot_heat <- ggplot(matrix_out) +
geom_tile(aes(x = Var2, y = Var1, fill = value), na.rm = TRUE, size = 0.0,show.legend = FALSE) +
scale_fill_gradient(
low = "transparent",
high = "#046A38"
) +
labs(x = "", y = "", fill = "") +
theme_linedraw() +
coord_cartesian(xlim = c(0, ncol(psm_matrix) + 1), ylim = c(0, ncol(psm_matrix) + 1), expand = FALSE) +
scale_x_continuous(breaks = seq(1, ncol(psm_matrix), by = 1),
#labels =c(TeX("$\\y_{1}$"),TeX("$\\y_{2}$"),TeX("$\\y_{3}$"),TeX("$\\y_{4}$"),TeX("$\\y_{5}$"),TeX("$\\y_{6}$"),TeX("$\\y_{7}$"))) +
labels =c(seq(1,50))) +
scale_y_continuous(breaks = seq(1, ncol(psm_matrix), by = 1),
#labels = c(TeX("$\\y_{1}$"),TeX("$\\y_{2}$"),TeX("$\\y_{3}$"),TeX("$\\y_{4}$"),TeX("$\\y_{5}$"),TeX("$\\y_{6}$"),TeX("$\\y_{7}$"))) +
labels =c(seq(1,50))) +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(size=0.1))
plot_heat
psm_matrix
MCMC_chain <- out$clust[5000:10000,]
psm_matrix <- salso::psm(clean_partition(MCMC_chain))
psm_matrix
matrix_out <- reshape2::melt(psm_matrix[1:nrow(psm_matrix), , drop = FALSE])
plot_heat <- ggplot(matrix_out) +
geom_tile(aes(x = Var2, y = Var1, fill = value), na.rm = TRUE, size = 0.0,show.legend = FALSE) +
scale_fill_gradient(
low = "transparent",
high = "#046A38"
) +
labs(x = "", y = "", fill = "") +
theme_linedraw() +
coord_cartesian(xlim = c(0, ncol(psm_matrix) + 1), ylim = c(0, ncol(psm_matrix) + 1), expand = FALSE) +
scale_x_continuous(breaks = seq(1, ncol(psm_matrix), by = 1),
#labels =c(TeX("$\\y_{1}$"),TeX("$\\y_{2}$"),TeX("$\\y_{3}$"),TeX("$\\y_{4}$"),TeX("$\\y_{5}$"),TeX("$\\y_{6}$"),TeX("$\\y_{7}$"))) +
labels =c(seq(1,50))) +
scale_y_continuous(breaks = seq(1, ncol(psm_matrix), by = 1),
#labels = c(TeX("$\\y_{1}$"),TeX("$\\y_{2}$"),TeX("$\\y_{3}$"),TeX("$\\y_{4}$"),TeX("$\\y_{5}$"),TeX("$\\y_{6}$"),TeX("$\\y_{7}$"))) +
labels =c(seq(1,50))) +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(size=0.1))
plot_heat
seq <- as.numeric()
for(i in 1:length(table(est_clust))){
seq <- c(seq,which(est_clust == as.numeric(names(sort(table(est_clust), decreasing = TRUE))[i])))
}
psm_matrix <- salso::psm(clean_partition(MCMC_chain))[seq,seq]
matrix_out <- reshape2::melt(psm_matrix[1:nrow(psm_matrix), , drop = FALSE])
plot_heat <- ggplot(matrix_out) +
geom_tile(aes(x = Var2, y = Var1, fill = value), na.rm = TRUE, size = 0.0,show.legend = FALSE) +
scale_fill_gradient(
low = "transparent",
high = "#046A38"
) +
labs(x = "", y = "", fill = "") +
theme_linedraw() +
coord_cartesian(xlim = c(0, ncol(psm_matrix) + 1), ylim = c(0, ncol(psm_matrix) + 1), expand = FALSE) +
scale_x_continuous(breaks = seq(1, ncol(psm_matrix), by = 1),
#labels =c(TeX("$\\y_{1}$"),TeX("$\\y_{2}$"),TeX("$\\y_{3}$"),TeX("$\\y_{4}$"),TeX("$\\y_{5}$"),TeX("$\\y_{6}$"),TeX("$\\y_{7}$"))) +
labels =c(seq(1,50))) +
scale_y_continuous(breaks = seq(1, ncol(psm_matrix), by = 1),
#labels = c(TeX("$\\y_{1}$"),TeX("$\\y_{2}$"),TeX("$\\y_{3}$"),TeX("$\\y_{4}$"),TeX("$\\y_{5}$"),TeX("$\\y_{6}$"),TeX("$\\y_{7}$"))) +
labels =c(seq(1,50))) +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(size=0.1))
plot_heat
psm_matrix
est_clust
library(dplyr)
library(ggplot2)
library(BayesCPs)
library(BNPmix)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
data[,,1] <- t(apply(data[,,1], 1, scale))
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
cps <- table(get_order_VI(out_2$orders[2000:3000,]))
abline(v = cumsum(cps)[-length(cps)])
for(i in 1:50){
data[,,i] <- t(apply(data[,,i], 1, scale))
}
out <- cluster_cp_multi(data = data,
n_iterations = 50000, B = 10000, L = 1, gamma = 0.1, q = 0.25, alpha_SM = 0.01, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
out <- cluster_cp_multi(data = data,
n_iterations = 50000, B = 100000, L = 1, gamma = 0.1, q = 0.25, alpha_SM = 0.01, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
library(dplyr)
library(ggplot2)
library(BayesCPs)
library(BNPmix)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
data[,,1] <- t(apply(data[,,1], 1, scale))
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
library(BayesCPs)
library(dplyr)
library(ggplot2)
library(BayesCPs)
library(BNPmix)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
data[,,1] <- t(apply(data[,,1], 1, scale))
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
devtools::load_all(".")
library(dplyr)
library(ggplot2)
library(BayesCPs)
library(BNPmix)
First_Day <- "2020-01-01"
Last_Day <- "2022-01-01"
data <- array(NA, c(3,505,50))
companies <- c("MSFT","AAPL","AMZN","NVDA","GOOGL","GOOG","BRK-B","UNH","LLY",
"JPM","XOM","AVGO","V","JNJ","PG","MA","HD","ADBE","COST","CVX","MRK","PEP","KO",
"WMT","CRM","NFLX","ACN","MCD","BAC","LIN","AMD","CSCO","TMO","INTC","ORCL","ABT",
"CMCSA","DIS","PFE","WFC","INTU","VZ","PM","DHR","AMGN","IBM","QCOM","TXN","COP","UNP")
for(i in 1:50){
DATA <- read.csv(paste0("G:/My Drive/Dottorato/Progetti/Model Based Clustering of TS/Backup project/Model-Based-Clustering-of-Time-Series/stock_data/",companies[i],".csv"), header = TRUE)
DATA <- DATA %>%
mutate(Mean = (High + Low)/2) %>%
mutate(Date = as.Date(Date)) %>%
dplyr::select(Date, Open, Mean, Close)
DATA <- DATA[which(DATA$Date >= First_Day & DATA$Date < Last_Day),]
data[,,i] <- t(DATA[,c(2,3,4)])
#ggplot(DATA) +
#  geom_line(aes(x = Date, y = Open)) +
#  geom_line(aes(x = Date, y = Mean), col = "darkblue") +
#  geom_line(aes(x = Date, y = Close), col = "darkred")
#data[[i]] <- DATA[,c(2,3,4)]
}
plot(data[1,,4], type = "l")
lines(data[2,,4])
lines(data[3,,4])
data[,,1] <- t(apply(data[,,1], 1, scale))
out_2 <- detect_cp_multivariate(data = data[,,1], n_iterations = 5000, q = 0.5, k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
cps <- table(get_order_VI(out_2$orders[2000:3000,]))
abline(v = cumsum(cps)[-length(cps)])
for(i in 1:50){
data[,,i] <- t(apply(data[,,i], 1, scale))
}
out <- cluster_cp_multi(data = data,
n_iterations = 50000, B = 100000, L = 1, gamma = 0.1, q = 0.25, alpha_SM = 0.01, k_0 = 0.25,
nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3))
