usethis::use_gpl3_license()
usethis::use_rcpp_armadillo()
usethis::use_r()
usethis::use_rcpp_armadillo("code.cpp")
usethis::use_package_doc()
devtools::document()
devtools::load_all()
mult(1,2)
?mul
?mult
devtools::load_all()
function_2(3,2)
?mult
?function_2
devtools::load_all()
function_2(3,4)
usethis::use_package("RcppGSL", type = "Depends", min_version = "0.3.0")
devtools::load_all()
devtools::load_all()
library(RcppGSL)
devtools::load_all()
usethis::use_package("RcppGSL", type = "Imports", min_version = "0.3.0")
devtools::load_all()
install.packages("RcppGSL")
install.packages("RcppGSL")
usethis::use_package("RcppGSL", type = "Imports", min_version = "0.3.13")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(RcppGSL)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?DetectCPMultivariateTS
??DetectCPMultivariateTS
library(BayesCPs)
?DetectCPMultivariateTS
?DetectCPsMultivariateTS
devtools::load_all(".")
devtools::load_all(".")
?ClusteringCPsUnivariateTS
library(BayesCPs)
?ClusteringCPsUnivariateTS
devtools::load_all(".")
?ClusteringCPsUnivariateTS
devtools::load_all(".")
?ClusteringCPsEPI
?ClusteringCPsUnivariateTS
devtools::load_all(".")
?ClusteringCPsUnivariateTS
?DetectCPsUnivariateTS
?ClusteringCPsMultivariateTS
devtools::load_all(".")
?ClusteringCPsUnivariateTS
devtools::load_all(".")
?ClusteringCPsUnivariateTS
devtools::load_all(".")
?ClusteringCPsUnivariateTS
?ClusteringCPsMultivariateTS
?BayesCPs
^rbinom
?rbinom
?ClusteringCPsUnivariateTS
?rbinom
devtools::load_all(".")
devtools::load_all(".")
?ClusteringCPsUnivariateTS
?DetectCPsUnivariateTS
?DetectCPsUnivariateTS
devtools::load_all(".")
devtools::load_all(".")
?DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
?lm
devtools::load_all(".")
?DetectCPsUnivariateTS
?DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
?DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
?DetectCPsUnivariateTS
?DetectCPsUnivariateTS
devtools::load_all(".")
library(BNPmix)
?psm
?dBNPdens
?PYdensity
?DetectCPsUnivariateTS
data_vec <- as.numeric(c(rnorm(50,0,1), rnorm(50,10,0.5)))
data_vec
DetectCPsUnivariateTS(data = data_vec, n_iterations = 2500, q = 0.5, phi = 0.1)
DetectCPsUnivariateTS(data = data_vec, n_iterations = 2500, q = 0.5, phi = 0.1, a = 1, b = 1, c = 0.1)
data_vec
plot(data_vec, type = "l")
data_vec <- as.numeric(c(rnorm(50,0,1), rnorm(50,10,0.5)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.5,
phi = 0.1, a = 1, b = 1, c = 0.1)
out$orders
out$orders[2500]
out$orders[,2500]
table(out$orders[2500,])
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,10,0.25)))
plot(data_vec, type = "l")
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.5,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(out$orders[2500,])
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,10,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(out$orders[2500,])
psm(out$orders[2500,])
psm(out$orders[2500])
psm(out$orders)
mcclust.ext::minVI(psm(out$orders))
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,10,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,10,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,10,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,10,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,0.2,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,0.2,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,0.2,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
plot(data_vec, type = "l")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
plot(data_vec, type = "l")
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
table(mcclust.ext::minVI(psm(out$orders))$cl)
?DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
library(BayesCPs)
?DetectCPsUnivariateTS
DetectCPsUnivariateTS
devtools::load_all(".")
?DetectCPsUnivariateTS
devtools::load_all(".")
library(BayesCPs)
?DetectCPsUnivariateTS
library(Salso)
library(salso)
salso::salso(psm(orders))
salso::salso(psm(out$orders))
?salso
psm(out$orders)
salso(x = psm(out$order))
salso(x = out$order)
usethis::use_testthat(3)
use_test("test-DetectCPsUnivariateTS")
usethis::use_test("test-DetectCPsUnivariateTS")
devtools::load_all(".")
psm(out_orders)
psm(out$orders)
order_VI(psm(out$orders))
order_VI(out$orders, psm(out$orders))
which.min(order_VI(out$orders, psm(out$orders)))
out$order[49,]
table(out$order[49,])
order_VI(out$orders, psm(out$orders))
devtools::load_all(".")
order_VI(out$orders, psm(out$orders))
devtools::load_all(".")
order_VI(out$orders, psm(out$orders))
devtools::load_all(".")
order_VI(out$orders, psm(out$orders))
table(order_VI(out$orders, psm(out$orders)))
devtools::load_all(".")
table(order_VI(out$orders))
devtools::load_all(".")
get_order_VI(out$orders)
table(get_order_VI(out$orders))
data_test <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
list <- list()
for(i in 1:10){
out_test <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
list[[i]] <- get_order_VI(out_test$order[1000:1500])
}
get_order_VI(out_test$order[1000:1500])
list <- list()
for(i in 1:10){
out_test <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
list[[i]] <- table(get_order_VI(out_test$order[1000:1500]))
}
out_test$order[1000:1500]
list <- list()
for(i in 1:10){
out_test <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
list[[i]] <- table(get_order_VI(out_test$order[1000:1500,]))
}
list
mean(length_orders)
length_orders <- as.numeric()
for(i in 1:10){
out_test <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
length_orders[i] <- length(get_order_VI(out_test$order[1000:1500,]))
}
mean(length_orders)
length_orders
length_orders <- as.numeric()
for(i in 1:10){
out_test <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
length_orders[i] <- length(table(get_order_VI(out_test$order[1000:1500,])))
}
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- DetectCPsUnivariateTS(data = data_vec,
n_iterations = 0,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
out <- detect_cp_univariate(data = data_vec,
n_iterations = 0,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
devtools::load_all(".")
out <- detect_cp_univariate(data = data_vec,
n_iterations = 1,
q = 1.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
out <- detect_cp_univariate(data = data_vec,
n_iterations = 1,
q = -1.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
devtools::check(".")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
?detect_cp_univariate
devtools::load_all(".")
devtools::load_all(".")
?detect_cp_univariate
devtools::load_all(".")
?detect_cp_multivariate
devtools::load_all(".")
devtools::load_all(".")
detect_cp_multivariate()
?detect_cp_multivariate
data_mat <- as.data.frame(matrix(NA, nrow = 3, ncol = 100))
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat
out <- detect_cp_multivariate(data = data_vec,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1)
out <- detect_cp_multivariate(data = data_mat,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1)
data_mat <- matrix(NA, nrow = 3, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
out <- detect_cp_multivariate(data = data_mat,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1)
get_order_VI(out$order)
table(get_order_VI(out$order))
data_mat <- matrix(NA, nrow = 3, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
out <- detect_cp_multivariate(data = data_mat,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1)
table(get_order_VI(out$order))
devtools::load_all(".")
?detect_cp_multivariate
devtools::load_all(".")
out <- detect_cp_multivariate(data = data_mat,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1, print_progress = FALSE)
out <- detect_cp_multivariate(data = data_mat,
n_iterations = 2500,
q = 0.25,k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
prior_theta_c = 2, prior_theta_d = 0.2, prior_var_gamma = 0.1, print_progress = TRUE)
devtools::load_all(".")
?detect_cp_univariate
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 3, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
length_orders <- as.numeric()
for(i in 1:10){
out_test <- detect_cp_multivariate(data = data_mat,
n_iterations = 2500, q = 0.25,
k_0 = 0.25, nu_0 = 4, phi_0 = diag(1,3,3), m_0 = rep(0,3),
par_theta_c = 2, par_theta_d = 0.2, prior_var_gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_order_VI(out_test$order[1000:1500,])))
}
if(mean(length_orders) < 3 & mean(length_orders) > 1.5){
check = TRUE
} else {
check = FALSE
}
check
length_orders
mean(length_orders)
devtools::load_all(".")
SplitMergeAccUnivariateTS
